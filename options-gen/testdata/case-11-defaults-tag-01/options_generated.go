// Code generated by options-gen qa-version. DO NOT EDIT.

package testcase

import (
	"fmt"
	fmt461e464ebed9 "fmt"
	"io"
	"time"

	errors461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/errors"
	validator461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/validator"
)

type OptOptionsSetter func(o *Options)

func NewOptions(
	rWCloser io.ReadWriteCloser,
	options ...OptOptionsSetter,
) Options {
	o := Options{}

	// Setting defaults from field tag (if present)
	o.valInt = 1

	o.valInt8 = 8

	o.valInt16 = 16

	o.valInt32 = 32

	o.valInt64 = 64

	o.valUInt = 11

	o.valUInt8 = 88

	o.valUInt16 = 1616

	o.valUInt32 = 3232

	o.valUInt64 = 6464

	o.valFloat32 = 32.32

	o.valFloat64 = 64.64

	o.valDuration, _ = time.ParseDuration("3s")

	o.valString = "golang"

	o.valBool = true

	o.rWCloser = rWCloser

	for _, opt := range options {
		opt(&o)
	}
	return o
}

func WithOptStringer(opt fmt.Stringer) OptOptionsSetter {
	return func(o *Options) {
		o.optStringer = opt
	}
}

func WithValInt(opt int) OptOptionsSetter {
	return func(o *Options) {
		o.valInt = opt
	}
}

func WithValInt8(opt int8) OptOptionsSetter {
	return func(o *Options) {
		o.valInt8 = opt
	}
}

func WithValInt16(opt int16) OptOptionsSetter {
	return func(o *Options) {
		o.valInt16 = opt
	}
}

func WithValInt32(opt int32) OptOptionsSetter {
	return func(o *Options) {
		o.valInt32 = opt
	}
}

func WithValInt64(opt int64) OptOptionsSetter {
	return func(o *Options) {
		o.valInt64 = opt
	}
}

func WithValUInt(opt uint) OptOptionsSetter {
	return func(o *Options) {
		o.valUInt = opt
	}
}

func WithValUInt8(opt uint8) OptOptionsSetter {
	return func(o *Options) {
		o.valUInt8 = opt
	}
}

func WithValUInt16(opt uint16) OptOptionsSetter {
	return func(o *Options) {
		o.valUInt16 = opt
	}
}

func WithValUInt32(opt uint32) OptOptionsSetter {
	return func(o *Options) {
		o.valUInt32 = opt
	}
}

func WithValUInt64(opt uint64) OptOptionsSetter {
	return func(o *Options) {
		o.valUInt64 = opt
	}
}

func WithValFloat32(opt float32) OptOptionsSetter {
	return func(o *Options) {
		o.valFloat32 = opt
	}
}

func WithValFloat64(opt float64) OptOptionsSetter {
	return func(o *Options) {
		o.valFloat64 = opt
	}
}

func WithValDuration(opt time.Duration) OptOptionsSetter {
	return func(o *Options) {
		o.valDuration = opt
	}
}

func WithValString(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.valString = opt
	}
}

func WithValBool(opt bool) OptOptionsSetter {
	return func(o *Options) {
		o.valBool = opt
	}
}

func (o *Options) Validate() error {
	errs := new(errors461e464ebed9.ValidationErrors)
	errs.Add(errors461e464ebed9.NewValidationError("valUInt8", _validate_Options_valUInt8(o)))
	errs.Add(errors461e464ebed9.NewValidationError("valDuration", _validate_Options_valDuration(o)))
	errs.Add(errors461e464ebed9.NewValidationError("valString", _validate_Options_valString(o)))
	return errs.AsError()
}

func _validate_Options_valUInt8(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.valUInt8, "min=50"); err != nil {
		return fmt461e464ebed9.Errorf("field `valUInt8` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_valDuration(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.valDuration, "min=100ms,max=30s"); err != nil {
		return fmt461e464ebed9.Errorf("field `valDuration` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_valString(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.valString, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `valString` did not pass the test: %w", err)
	}
	return nil
}
