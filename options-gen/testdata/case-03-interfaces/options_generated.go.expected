// Code generated by options-gen qa-version. DO NOT EDIT.

package testcase

import (
	"fmt"
	"io"
)

type optField int8

const (
	Fieldany         optField = 0
	Fieldstringer    optField = 1
	FieldrWCloser    optField = 2
	Fieldlocal       optField = 3
	FieldoptAny      optField = 4
	FieldoptStringer optField = 5
	FieldoptRWCloser optField = 6
	FieldoptLocal    optField = 7
)

var optIsSet = [8]bool{}

type OptOptionsSetter func(o *Options)

func NewOptions(
	any any,
	stringer fmt.Stringer,
	rWCloser io.ReadWriteCloser,
	local localInterface,
	options ...OptOptionsSetter,
) Options {
	o := Options{}

	var empty [8]bool
	optIsSet = empty

	// Setting defaults from field tag (if present)

	o.any = any
	optIsSet[Fieldany] = true
	o.stringer = stringer
	optIsSet[Fieldstringer] = true
	o.rWCloser = rWCloser
	optIsSet[FieldrWCloser] = true
	o.local = local
	optIsSet[Fieldlocal] = true

	for _, opt := range options {
		opt(&o)
	}
	return o
}

func WithOptAny(opt any) OptOptionsSetter {
	return func(o *Options) {
		o.optAny = opt
		optIsSet[FieldoptAny] = true
	}
}

func WithOptStringer(opt fmt.Stringer) OptOptionsSetter {
	return func(o *Options) {
		o.optStringer = opt
		optIsSet[FieldoptStringer] = true
	}
}

func WithOptRWCloser(opt io.ReadWriteCloser) OptOptionsSetter {
	return func(o *Options) {
		o.optRWCloser = opt
		optIsSet[FieldoptRWCloser] = true
	}
}

func WithOptLocal(opt localInterface) OptOptionsSetter {
	return func(o *Options) {
		o.optLocal = opt
		optIsSet[FieldoptLocal] = true
	}
}

func (o *Options) Validate() error {
	return nil
}

func (o *Options) IsSet(field optField) bool {
	return optIsSet[field]
}
