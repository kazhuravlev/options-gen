// Code generated by options-gen qa-version. DO NOT EDIT.

package testcase

import (
	fmt461e464ebed9 "fmt"

	errors461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/errors"
	validator461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/validator"
)

type OptOptionsSetter func(o *Options)

func NewOptions(
	valInt int,
	valInt8 int8,
	valInt16 int16,
	valInt32 int32,
	valInt64 int64,
	valUInt uint,
	valUInt8 uint8,
	valUInt16 uint16,
	valUInt32 uint32,
	valUInt64 uint64,
	valFloat32 float32,
	valFloat64 float64,
	valString string,
	valBytes []byte,
	valBool bool,
	options ...OptOptionsSetter,
) Options {
	var o Options

	// Setting defaults from field tag (if present)

	o.valInt = valInt
	o.valInt8 = valInt8
	o.valInt16 = valInt16
	o.valInt32 = valInt32
	o.valInt64 = valInt64
	o.valUInt = valUInt
	o.valUInt8 = valUInt8
	o.valUInt16 = valUInt16
	o.valUInt32 = valUInt32
	o.valUInt64 = valUInt64
	o.valFloat32 = valFloat32
	o.valFloat64 = valFloat64
	o.valString = valString
	o.valBytes = valBytes
	o.valBool = valBool

	for _, opt := range options {
		opt(&o)
	}
	return o
}

// optValInt docstring-1
func WithOptValInt(opt int) OptOptionsSetter {
	return func(o *Options) {
		o.optValInt = opt
	}
}

// docstring-2
func WithOptValInt8(opt int8) OptOptionsSetter {
	return func(o *Options) {
		o.optValInt8 = opt
	}
}

func WithOptValInt16(opt int16) OptOptionsSetter {
	return func(o *Options) {
		o.optValInt16 = opt
	}
}

// Just
// a
// comment
func WithOptValInt32(opt int32) OptOptionsSetter {
	return func(o *Options) {
		o.optValInt32 = opt
	}
}

// Just
// a
// comment
func WithOptValInt64(opt int64) OptOptionsSetter {
	return func(o *Options) {
		o.optValInt64 = opt
	}
}

func WithOptValUInt(opt uint) OptOptionsSetter {
	return func(o *Options) {
		o.optValUInt = opt
	}
}

func WithOptValUInt8(opt uint8) OptOptionsSetter {
	return func(o *Options) {
		o.optValUInt8 = opt
	}
}

func WithOptValUInt16(opt uint16) OptOptionsSetter {
	return func(o *Options) {
		o.optValUInt16 = opt
	}
}

func WithOptValUInt32(opt uint32) OptOptionsSetter {
	return func(o *Options) {
		o.optValUInt32 = opt
	}
}

func WithOptValUInt64(opt uint64) OptOptionsSetter {
	return func(o *Options) {
		o.optValUInt64 = opt
	}
}

func WithOptValFloat32(opt float32) OptOptionsSetter {
	return func(o *Options) {
		o.optValFloat32 = opt
	}
}

func WithOptValFloat64(opt float64) OptOptionsSetter {
	return func(o *Options) {
		o.optValFloat64 = opt
	}
}

func WithOptValString(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.optValString = opt
	}
}

func WithOptValBytes(opt []byte) OptOptionsSetter {
	return func(o *Options) {
		o.optValBytes = opt
	}
}

func WithOptValBool(opt bool) OptOptionsSetter {
	return func(o *Options) {
		o.optValBool = opt
	}
}

func (o *Options) Validate() error {
	errs := new(errors461e464ebed9.ValidationErrors)
	errs.Add(errors461e464ebed9.NewValidationError("optValInt", _validate_Options_optValInt(o)))
	errs.Add(errors461e464ebed9.NewValidationError("optValInt8", _validate_Options_optValInt8(o)))
	errs.Add(errors461e464ebed9.NewValidationError("optValInt16", _validate_Options_optValInt16(o)))
	errs.Add(errors461e464ebed9.NewValidationError("optValInt32", _validate_Options_optValInt32(o)))
	errs.Add(errors461e464ebed9.NewValidationError("optValInt64", _validate_Options_optValInt64(o)))
	errs.Add(errors461e464ebed9.NewValidationError("optValUInt", _validate_Options_optValUInt(o)))
	errs.Add(errors461e464ebed9.NewValidationError("optValUInt8", _validate_Options_optValUInt8(o)))
	errs.Add(errors461e464ebed9.NewValidationError("optValUInt16", _validate_Options_optValUInt16(o)))
	errs.Add(errors461e464ebed9.NewValidationError("optValUInt32", _validate_Options_optValUInt32(o)))
	errs.Add(errors461e464ebed9.NewValidationError("optValUInt64", _validate_Options_optValUInt64(o)))
	errs.Add(errors461e464ebed9.NewValidationError("optValFloat32", _validate_Options_optValFloat32(o)))
	errs.Add(errors461e464ebed9.NewValidationError("optValFloat64", _validate_Options_optValFloat64(o)))
	errs.Add(errors461e464ebed9.NewValidationError("optValString", _validate_Options_optValString(o)))
	errs.Add(errors461e464ebed9.NewValidationError("optValBytes", _validate_Options_optValBytes(o)))
	errs.Add(errors461e464ebed9.NewValidationError("optValBool", _validate_Options_optValBool(o)))
	return errs.AsError()
}

func _validate_Options_optValInt(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.optValInt, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `optValInt` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_optValInt8(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.optValInt8, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `optValInt8` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_optValInt16(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.optValInt16, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `optValInt16` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_optValInt32(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.optValInt32, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `optValInt32` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_optValInt64(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.optValInt64, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `optValInt64` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_optValUInt(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.optValUInt, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `optValUInt` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_optValUInt8(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.optValUInt8, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `optValUInt8` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_optValUInt16(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.optValUInt16, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `optValUInt16` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_optValUInt32(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.optValUInt32, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `optValUInt32` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_optValUInt64(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.optValUInt64, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `optValUInt64` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_optValFloat32(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.optValFloat32, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `optValFloat32` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_optValFloat64(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.optValFloat64, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `optValFloat64` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_optValString(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.optValString, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `optValString` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_optValBytes(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.optValBytes, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `optValBytes` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_optValBool(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.optValBool, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `optValBool` did not pass the test: %w", err)
	}
	return nil
}
