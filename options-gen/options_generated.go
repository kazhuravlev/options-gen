// Code generated by options-gen v0.45.0. DO NOT EDIT.

package optionsgen

import (
	fmt461e464ebed9 "fmt"

	errors461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/errors"
	validator461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/validator"
)

type OptOptionsSetter func(o *Options)

func NewOptions(
	options ...OptOptionsSetter,
) Options {
	o := Options{}

	// Setting defaults from field tag (if present)

	for _, opt := range options {
		opt(&o)
	}
	return o
}

func WithVersion(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.version = opt

	}
}

func WithInFilename(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.inFilename = opt

	}
}

func WithOutFilename(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.outFilename = opt

	}
}

func WithStructName(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.structName = opt

	}
}

func WithPackageName(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.packageName = opt

	}
}

func WithOutPrefix(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.outPrefix = opt

	}
}

func WithDefaults(opt Defaults) OptOptionsSetter {
	return func(o *Options) {
		o.defaults = opt

	}
}

func WithShowWarnings(opt bool) OptOptionsSetter {
	return func(o *Options) {
		o.showWarnings = opt

	}
}

func WithWithIsset(opt bool) OptOptionsSetter {
	return func(o *Options) {
		o.withIsset = opt

	}
}

func WithAllVariadic(opt bool) OptOptionsSetter {
	return func(o *Options) {
		o.allVariadic = opt

	}
}

func WithConstructorTypeRender(opt ConstructorTypeRender) OptOptionsSetter {
	return func(o *Options) {
		o.constructorTypeRender = opt

	}
}

func WithOutOptionTypeName(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.outOptionTypeName = opt

	}
}

func WithExclude(opt ...string) OptOptionsSetter {
	return func(o *Options) {
		o.exclude = append(o.exclude, opt...)

	}
}

func (o *Options) Validate() error {
	errs := new(errors461e464ebed9.ValidationErrors)
	errs.Add(errors461e464ebed9.NewValidationError("version", _validate_Options_version(o)))
	errs.Add(errors461e464ebed9.NewValidationError("inFilename", _validate_Options_inFilename(o)))
	errs.Add(errors461e464ebed9.NewValidationError("outFilename", _validate_Options_outFilename(o)))
	errs.Add(errors461e464ebed9.NewValidationError("structName", _validate_Options_structName(o)))
	errs.Add(errors461e464ebed9.NewValidationError("packageName", _validate_Options_packageName(o)))
	errs.Add(errors461e464ebed9.NewValidationError("defaults", _validate_Options_defaults(o)))
	errs.Add(errors461e464ebed9.NewValidationError("constructorTypeRender", _validate_Options_constructorTypeRender(o)))
	return errs.AsError()
}

func _validate_Options_version(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.version, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `version` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_inFilename(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.inFilename, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `inFilename` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_outFilename(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.outFilename, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `outFilename` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_structName(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.structName, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `structName` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_packageName(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.packageName, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `packageName` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_defaults(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.defaults, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `defaults` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_constructorTypeRender(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.constructorTypeRender, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `constructorTypeRender` did not pass the test: %w", err)
	}
	return nil
}
