package generator

import (
	req "github.com/stretchr/testify/require" // test named imports
	"testing"
)

const gofile = "generator_test.go"

func TestGetImports(t *testing.T) {
	imports, err := GetImports(gofile)
	req.Nil(t, err)
	var requiredImports = []string{
		`req "github.com/stretchr/testify/require"`,
		`"testing"`,
	}
	req.Equal(t, requiredImports, imports)
}

func TestGetOptionSpec(t *testing.T) {
	data, err := GetOptionSpec(gofile, "testStruct")
	req.Nil(t, err)
	req.Equal(t, []optionMeta{
		{
			Name:  "Str",
			Field: "str",
			Type:  "string",
			TagOption: tagOption{
				IsRequired: true,
				IsNotEmpty: true,
			},
		},
		{
			Name:  "Ignore",
			Field: "ignore",
			Type:  "string",
			TagOption: tagOption{
				IsRequired: false,
				IsNotEmpty: false,
			},
		},
	}, data)
}

func TestRenderOptions(t *testing.T) {
	data, err := GetOptionSpec(gofile, "testStruct")
	req.Nil(t, err)
	imports, err := GetImports(gofile)
	req.Nil(t, err)
	res, err := RenderOptions("generator", imports, data)
	req.Nil(t, err)

	req.Equal(t, testStructGenerated, res)
}

type testStruct struct {
	str    string `option:"required,not-empty"`
	ignore string
}

const testStructGenerated = `// Code generated by options-gen. DO NOT EDIT.
package generator

import (
	"github.com/kazhuravlev/options-gen/generator/utils"
	"github.com/pkg/errors"
	req "github.com/stretchr/testify/require"
	"testing"
)

type optMeta struct {
	setter    func(o *Options)
	validator func(o *Options) error
}

func _strOptValidator(o *Options) error {
	if utils.IsNil(o.str) {
		return errors.Wrap(ErrInvalidOption, "Str must be set (type string)")
	}
	return nil
}

func _ignoreOptValidator(o *Options) error {

	return nil
}

func WithIgnore(opt string) optMeta {
	return optMeta{
		setter:    func(o *Options) { o.ignore = opt },
		validator: _ignoreOptValidator,
	}
}

func NewOptions(
	str string,

	options ...optMeta,
) Options {
	o := Options{}
	o.str = str

	for i := range options {
		options[i].setter(&o)
	}

	return o
}

func (o *Options) Validate() error {
	if err := _strOptValidator(o); err != nil {
		return errors.Wrap(err, "invalid value for option WithStr")
	}
	if err := _ignoreOptValidator(o); err != nil {
		return errors.Wrap(err, "invalid value for option WithIgnore")
	}

	return nil
}
`
