// Code generated by options-gen. DO NOT EDIT.
package {{ .packageName }}

import (
    "github.com/pkg/errors"
    "golang.org/x/sync/errgroup"
	"github.com/kazhuravlev/options-gen/validator"
	goplvalidator "github.com/go-playground/validator/v10"
	{{- range $import := .imports }}
	{{ $import -}}
	{{- end }}
)

type opt{{ .optionsStructName }}Meta struct {
	setter    func(o *{{ .optionsStructName }})
	validator func(o *{{ .optionsStructName }}) error
}

func New{{ .optionsStructName }}(
	{{ range .options -}}
        {{ if .TagOption.IsRequired -}}
            {{ .Field }} {{ .Type }},
        {{ end }}
	{{- end }}
	options ...opt{{ .optionsStructName }}Meta,
) {{ .optionsStructName }} {
	o := {{ .optionsStructName }}{}
	{{ range .options }}{{ if .TagOption.IsRequired -}}
		o.{{ .Field }} = {{ .Field }}
	{{ end }}{{ end }}

	for i := range options{
		options[i].setter(&o)
	}

	return o
}

{{ range .options }}
	{{ if not .TagOption.IsRequired }}
		func With{{ .Name }}(opt {{ .Type }}) opt{{ $.optionsStructName }}Meta {
			 return opt{{ $.optionsStructName }}Meta{
				 setter: func(o *{{ $.optionsStructName }}) { o.{{ .Field }} = opt },
				 validator: _{{ $.optionsStructName }}_{{ .Field }}Validator,
			 }
		}
	{{ end }}
{{ end }}


func (o *{{ .optionsStructName }}) Validate() error {
    g := new(errgroup.Group)

	{{ range .options -}}
	    g.Go(func() error {
	        err := _{{ $.optionsStructName }}_{{ .Field }}Validator(o)

	        return errors.Wrap(err, "invalid value for option With{{ .Name }}")
	    })
	{{ end -}}

	return g.Wait()
}

{{ range .options }}
	func _{{ $.optionsStructName }}_{{ .Field }}Validator(o *{{ $.optionsStructName }}) error {
		{{ if .TagOption.IsNotEmpty -}}
			if validator.IsNil(o.{{ .Field }}) {
				return errors.Wrap(ErrInvalidOption, "{{ .Field }} must be present (type {{ .Type }})")
			}
		{{- end }}

		{{ if .TagOption.GoValidator -}}
            if err := goplvalidator.New().Var(o.{{ .Field }}, "{{ .TagOption.GoValidator }}"); err != nil {
                return errors.Wrap(err, "field `{{ .Field }}` did not pass the test")
            }
		{{- end }}

		return nil
	}
{{ end }}
