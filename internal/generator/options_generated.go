// Code generated by options-gen v0.45.0. DO NOT EDIT.

package generator

import (
	fmt461e464ebed9 "fmt"

	errors461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/errors"
	validator461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/validator"
)

type OptOptionsSetter func(o *Options)

func NewOptions(
	options ...OptOptionsSetter,
) Options {
	o := Options{}

	// Setting defaults from field tag (if present)

	for _, opt := range options {
		opt(&o)
	}
	return o
}

func WithVersion(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.version = opt

	}
}

func WithPackageName(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.packageName = opt

	}
}

func WithOptionsStructName(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.optionsStructName = opt

	}
}

func WithFileImports(opt []string) OptOptionsSetter {
	return func(o *Options) {
		o.fileImports = opt

	}
}

func WithSpec(opt *OptionSpec) OptOptionsSetter {
	return func(o *Options) {
		o.spec = opt

	}
}

func WithTagName(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.tagName = opt

	}
}

func WithVarName(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.varName = opt

	}
}

func WithFuncName(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.funcName = opt

	}
}

func WithPrefix(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.prefix = opt

	}
}

func WithWithIsset(opt bool) OptOptionsSetter {
	return func(o *Options) {
		o.withIsset = opt

	}
}

func WithConstructorTypeRender(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.constructorTypeRender = opt

	}
}

func WithOptionTypeName(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.optionTypeName = opt

	}
}

func (o *Options) Validate() error {
	errs := new(errors461e464ebed9.ValidationErrors)
	errs.Add(errors461e464ebed9.NewValidationError("version", _validate_Options_version(o)))
	errs.Add(errors461e464ebed9.NewValidationError("packageName", _validate_Options_packageName(o)))
	errs.Add(errors461e464ebed9.NewValidationError("optionsStructName", _validate_Options_optionsStructName(o)))
	errs.Add(errors461e464ebed9.NewValidationError("spec", _validate_Options_spec(o)))
	errs.Add(errors461e464ebed9.NewValidationError("constructorTypeRender", _validate_Options_constructorTypeRender(o)))
	errs.Add(errors461e464ebed9.NewValidationError("optionTypeName", _validate_Options_optionTypeName(o)))
	return errs.AsError()
}

func _validate_Options_version(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.version, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `version` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_packageName(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.packageName, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `packageName` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_optionsStructName(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.optionsStructName, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `optionsStructName` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_spec(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.spec, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `spec` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_constructorTypeRender(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.constructorTypeRender, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `constructorTypeRender` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_optionTypeName(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.optionTypeName, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `optionTypeName` did not pass the test: %w", err)
	}
	return nil
}
